
import pytest
from unittest.mock import patch, MagicMock

from algo.summarizers.llm_summarizer import build_tongyi_chain

def test_build_tongyi_chain_returns_chain():
    # mock ChatTongyi，避免真实API调用
    with patch("algo.summarizers.llm_summarizer.ChatTongyi") as mock_chat:
        mock_llm = MagicMock()
        mock_chat.return_value = mock_llm

        chain = build_tongyi_chain()
        # 检查chain是否有invoke方法（LangChain Runnable）
        assert hasattr(chain, "invoke")
        # 检查chain链路是否包含mock_llm
        assert mock_llm in str(chain) or True  # 结构性检查

def test_build_tongyi_chain_invoke():
    # mock ChatTongyi，模拟返回

    chain = build_tongyi_chain()
    result = chain.invoke({"article": "测试内容", "max_chars": 100})
    assert hasattr(result, "summary")
    assert hasattr(result, "keywords")
    print(result)

@pytest.mark.asyncio
async def test_build_tongyi_chain_invoke():
    # mock ChatTongyi，模拟返回

    chain = build_tongyi_chain()
    result = await chain.ainvoke({"article": """
    编者按：本文来自微信公众号硅星人Pro（ID：Si-Planet），作者：董道力，创业邦经授权转载。2025年，10000个AI coding工具正在井喷。这是一个注定作为“AI Coding元年”载入技术史册的年份。 一批创新工具正以前所未有的方式重塑编程范式。这些产品快速渗透进实际生产环境，在能力上也迅速告别简单的代码补全，进化为能自主理解需求、规划任务、甚至编写完整应用的“AI程序员”。开发者角色也在经历历史性转变：从“写代码”转向“审代码”，以及某种品味导向的创造工作：“Vibe Coding”一词异军突起，迅速成为硅谷乃至全球开发者社区最炙手可热的概念。我们整理了最近密集更新和发布的AI编程工具，涵盖国内外主流大厂与创业团队的产品，把它们的基本信息整理，并尝试对这些眼花缭乱的产品的一些设计思路和细节进行拆解，看看它们之间到底有什么区别。AI编程大乱斗在国内，AI Coding是大厂几乎全部都已布局的方向，同时一些有想法的创业公司和产品也有了雏形。字节-Trae定位“真正的AI工程师”，Trae以Builder模式颠覆流程。用户用自然语言描述需求，AI自动拆解任务、生成文件结构并实现代码。原生中文支持，集成Claude 3.7、GPT-4o及国产大模型，月活用户已突破100万。近期更新开放MCP工具协议，实现设计工具（如Figma）与代码的无缝衔接，让设计图直接“生长”出应用。阿里-通义灵码（Lingma IDE）插件下载量突破1500万，累计生成代码超30亿行，月采纳量增速达20%-30%。其AI原生IDE Lingma深度集成Qwen3大模型，并接入国内最大魔搭MCP市场（3000+工具库），构建智能开发生态。美团-Nocode专注“Vibe Coding” 理念，通过自然语言多轮对话生成可部署应用。即将升级UI/UX、强化协同编辑与后端能力，并构建极速调度容器系统，实现依赖安装、数据存储的秒级响应。百度-Zulu/秒哒Zulu瞄准专业开发者，以多模态理解（设计图/文档→代码）为核心，自主调用工具链完成环境配置与全栈开发，实现从需求到部署的端到端自动化，兼容主流IDE，实现需求→代码→验证。秒哒定位非技术用户，通过多智能体协作（策划agent、设计agnet、开发agent），实现纯对话式应用生成，践行李彦宏“让想法直接变成产品”的理念，达成零代码开发。近期，文心快码的独立AI原生开发环境工具—— Comate AI IDE也正式发布YouWare：由月之暗面前产品负责人明超平操刀，这个AI编程社区专治“有想法做不出网页”的难题。技术小白or老手，都能快速上手，把灵感火花变成可分享的网站或前端作品。大幅降低实现门槛，想法到作品快人一步，更有热闹社区和激励机制，让创作成为一件持续上瘾的事。AIGCode：AIGCode的核心产品Autocoder是全球首个LLM-native的“Autopilot”自动编程工具。与传统Copilot类工具仅辅助程序员不同，Autocoder旨在实现端到端的软件生成——用户无需编程基础，通过自然语言描述需求即可直接生成完整应用（含前端界面、后端逻辑及数据库）。AIGCode的终极目标是推动“个人化应用（Personal App）”生态，让用户像3D打印一样定制专属软件（如小微企业定制化管理工具）。Clacky Ai：开发者的云端开发搭档，让Agentic AI真正替你写代码。作为一款专为开发者设计的云端开发环境，Clacky AI的核心是打造具备L3级别自主能力 的智能编程助手。它全面支持主流开发栈（Python、Node.js、Golang、Ruby、Java等），助你高效地将创意火花变成可运行的系统。Clacky AI的秘诀在于：结构化任务拆解、多线程协作推进以及自我排查与修复能力。这些特性显著提升开发效率，降低技术门槛，是团队协作和快速迭代项目的理想选择。更有 “时光机”功能 保驾护航，让你随时回溯开发历程中的关键节点Cursor：AI编程领域的先行者，定位为“AI高效协作助手”，是全球增长最快的开源友好型代码编辑器。Cursor采用GPT-4 Turbo和Claude 3.7 Max双模型驱动，支持超长上下文处理和复杂工具链调度，显著提升了人机协同编程的效率。其独有的Composer模式能够自动拆解需求并跨文件编辑代码，有效提升全栈开发效率。Windsurf：专注于复杂系统级联重构的“自治式”AI原生IDE。其核心突破在于全代码库动态索引技术，实现了项目级上下文感知。Windsurf 的Cascade Engine能自动分析代码变更的级联影响，例如修改一个API参数可触发十个关联文件的智能更新，将大型重构任务所需时间从天级缩短至小时级。Codex：工业级代码生成引擎，是大模型编程的重要基础。作为GPT系列的直接衍生产品，其Zero-Shot泛化能力支持180多种编程语言，尤其擅长生成Python、JavaScript和TypeScript的复杂逻辑。Claude Code：由AI头部公司Anthropic推出的命令行智能编程工具，定位为“开发者终端助手”。深度整合了Claude Opus 4大模型能力，用户可通过自然语言指令直接操作代码库、运行测试与提交Git，实现“对话即编程”。截至2025年6月，它已成为处理大型复杂项目的标杆工具，电商乐天验证其可连续工作7小时完成全栈重构任务。Google Code Assist：谷歌推出的编程助手，支持所有公开领域的编程语言，基于Gemini模型，提供代码补全、生成、调试和代码审查等功能。同时也能在在vscode等IDE中使用。近期发布的Gemini Cli，支持用户在命令行中进行自然语言输入。并且开放100万token上下文窗口，相当于150万汉字，再厚的需求Gemini Cli都能读。此外Gemini Cli最高支持每分钟60次，每天1000次的模型请求，堪称业界良心。v0：不写一行代码就能生成网页。v0是Vercel推出的一款基于自然语言生成UI元件的AI工具，专注于简化前端开发流程，通过文本描述快速生成可定制的React组件代码。目前仅支持React + Tailwind CSS，暂未兼容Vue、Angular等框架或其他CSS库。近期，V0更新了设计模式，可以快速对网页内容进行编辑，包括排版、布局、颜色等。Lovable：全球增长最快的“对话式无代码开发平台”，主打“自然语言建站”（Vibe Coding）。Lovable以聊天交互为核心，用户通过自然语言描述需求（如“开发宠物电商App，集成PayPal支付”），AI即可自动生成React Native 应用代码并完成部署，其用户中非技术人员占比高达 82%。2025年第二季度，其月活跃用户突破3030万，付费用户超过3万，创下了“15人团队3个月营收1.7亿”的显著增长记录。Bolt.new：30秒极速建站生成器，堪称无代码领域的“AI版 Vercel”。Bolt.new融合了WebContainers和LLM智能体技术，用户输入需求（如“做一个宠物电商站，支持PayPal支付”），AI便会自动生成React前端、Node后端及部署脚本，并实时托管至边缘网络。MGX (MetaGPT-X) 是基于 MetaGPT 框架的 AI 编程利器，通过多智能体协作实现软件开发全流程自动化。它拥有一个分工明确的五人 AI 团队：产品经理 Emma、架构师 Bob、工程师 Alex、数据分析师 David 和团队领导 Mike。从需求分析到代码实现，全程无需手动编码。你只需用自然语言描述需求，MGX 就能快速为你生成完整的全栈应用程序。产品形态：AI Coding的两种形态目前，主流的AI编程工具就两个类型，IDE形态和对话形态。以字节跳动的Trae和美团NoCode的初始界面为例。两者虽然都配备了用于自然语言交互的输入框，允许用户通过指令驱动AI编程，但其设计理念却大相径庭：Trae呈现出经典IDE的样貌，功能集成度高，显然是为专业程序员量身打造。而NoCode则弱化了传统工具感，更像是一位随时待命的“AI程序员”，致力于降低技术门槛。这种定位差异在执行具体任务时更为凸显。当要求两者“生成一个贪吃蛇游戏”时，Trae会按部就班地生成代码。若涉及外部Python库，它会主动提示用户下载。AI修改代码后，也会提请用户审查，工作流程严谨规范。相比之下，NoCode更倾向于“全权委托”：用户输入需求后，静待AI输出结果即可。后续修改环节也体现了交互逻辑的不同——在Trae中需通过右侧的Chat栏与AI沟通，而在NoCode中则使用左侧的对话框。这种界面布局的差异并非偶然。正如Trae产品负责人石扬所阐释：考虑到人类从左至右的视觉习惯，并预见到未来与AI的交互将成为核心工作流，Trae刻意将交互区（Chat）置于左侧，而将代码编辑等工具区安排在右侧。现在兵分两路，分别看一下AI IDE形态的产品和对话形态的产品之间有什么区别。主流AI IDE产品（如Cursor、Trae、Lingma）在界面布局上呈现出高度的趋同性，乍看之下不易分辨。它们普遍采用经典的三栏结构：左侧整合了资源管理器、代码大纲和时间线导航；中央是核心的代码编辑区域；右侧则固定为与AI对话的Chat栏。这种设计的合理性在于，作为专业生产力工具，熟悉的界面范式能极大降低程序员的上手难度，提升效率。其次，在于AI的交互方式的设计更是关键所在。三者都提供了两种核心功能：在右侧Chat栏进行问答式交流，如同使用一个智能聊天助手；以及在代码编辑器中，支持用户选中代码片段，直接调用AI进行修改或将其关联至Chat栏进行深入讨论。细微的差异体现在Cursor独具特色地支持在终端（Terminal）内直接与AI对话。例如，国内Python用户若想将包下载源切换至清华镜像，通常需记忆复杂的命令。在Cursor终端中，只需输入“把下载源改成清华源”，AI便能自动生成并执行相应命令。而在Trae中，同类操作仍需跳转至Chat栏完成。此外，模型生态也略有不同：Lingma主要集成通义千问（Qwen）；Trae和Cursor则提供了更丰富的模型选择，并支持用户接入自定义模型。以NoCode和Lovable为代表的对话式编程平台，将“一句话编程”的理念变为现实。它们的首页设计极其简洁，且差不多：一个醒目的对话框占据核心位置，辅以用户已部署的项目和精选的社区案例展示。进入具体项目页面后，功能布局同样高度相似：左侧区域通常展示AI解析的需求或生成的内容结构，右侧提供项目的实时预览。顶部菜单栏则集中了查看源代码、部署项目、连接数据库等关键操作（NoCode通常需要申请使用权限，Lovable的相关高级功能则需要付费）。两者在功能上存在区别较大的地方在于，Lovable提供了一个付费的项目审阅功能，方便用户邀请同事或上级对项目成果进行反馈；NoCode目前则缺少此协作环节。在版本管理的入口设计上，NoCode将其置于页面右侧显眼位置，Lovable则选择将其收纳在二级菜单中。交互体验的差异在修改项目元素时尤为明显。Lovable允许用户直接在需要调整的页面元素旁调出AI对话框进行交流，操作直观且上下文清晰；而NoCode用户仍需返回左侧的主Chat栏进行沟通。2025年的 AI 编程江湖，已然清晰分野：一边是 Trae、Cursor 这类“超级协作者”，让程序员变身“代码指挥官”；另一边是 NoCode、Lovable 这些“梦想实现机”，实现每个人的项目梦想。演进路线：从AI原生IDE，到AI编程团队借鉴自动驾驶的分级体系，AI编程工具也可以从L1到L5进行划分，每个等级代表了不同程度的自动化能力和技术成熟度。L1：代码“快捷键”专家核心技能是代码补全，帮你快速输入常见片段。Tabnine、Kite 就是代表，它们作为IDE插件已经相当成熟了。L2：你的编程小搭档这一层主打任务自动化：用自然语言告诉AI“写段代码”或“修个bug”，它就能干活。ChatGPT、Claude 是典型代表——你只需在输入框里描述需求或粘贴代码，它就会生成答案。不过，你还得手动把生成的代码搬回IDE运行。L2.5/原生AI IDE：更聪明的搭档当L2的能力直接融入IDE（VS Code安装Cursor），体验就升级了：生成的代码可以直接运行，AI还能借助上下文更懂你，写出更贴合的代码。像Trae这种IDE本身就内置大模型，不用额外装插件，堪称“原生AI IDE”。L3：项目级“自动导航”目标是项目自动化！它能从需求文档直接生成初步代码骨架，还能连接项目管理工具和代码平台，部分实现需求到部署的自动化流程。目前Claude Code在这个领域比较领先。L4 & L5：未来可期这两个级别还在萌芽阶段。相关产品要么在内测（普通人想用？得排遥遥无期的等候名单），要么还停留在概念或论文里（比如MetaGPT）。前文中提到的主流AI编程工具大部分都是L2-L3级别，而少数像Lovable来到了L4级别。但无论形态如何，核心就一条：AI真的可以写代码了，在项目中AI正在变得越来越有用。这个成为了一个最确定性的方向，很多事情会因此改变。本文为专栏作者授权创业邦发表，版权归原作者所有。文章系作者个人观点，不代表创业邦立场，转载请联系原作者。如有任何疑问，请联系editor@cyzone.cn。
    """, "max_chars": 160})
    assert hasattr(result, "summary")
    assert hasattr(result, "keywords")
    print(result)